#!/bin/bash

# Move state into main folder for initialisation
mv ./output/final_state.data ./ 2> /dev/null

# Fix any path issues
current_path=$( pwd -P )
parent_path=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )

# Get the number of cores to use
numproc=$(lscpu | grep "Core(s)" | awk '{print $4}')
if [[ $numproc != *[!\ ]* ]]; then
	numproc=$(lscpu | grep "NÃºcleo(s)" | awk '{print $4}')
fi
if [[ $numproc != *[!\ ]* ]]; then
	numproc=$(sysctl -a | grep machdep.cpu.core_count | awk '{print $2}')
fi
if [[ $numproc != *[!\ ]* ]]; then
	echo "Couldn't auto-detect number of cores to use, using 1"
	numproc=1
fi

# To prevent localisation issues (1.3 not 1,3)
LC_NUMERIC=en_US.UTF-8

# Help function
function outputHelp {

	echo "-------------------------------------------------------"
	echo "|          Spinnet - Spin Network Simulator           |"
	echo "-------------------------------------------------------"
	echo "|   Developed by Marta Estarellas and Luke Mortimer   |"
	echo "|              University of York, 2019               |"
	echo "-------------------------------------------------------"
	echo "| Original:    https://github.com/estaremp/spinchain  |"
	echo "| Genetic:     https://github.com/Lumorti/spinchain   |"
	echo "-------------------------------------------------------"
	echo " "
	echo "Usage:"
	echo "  spinnet [flags?] [network string] [flags?]"
	echo " "
	echo "Exclusive Flags:"
	echo "  -v --visualise          visualise the network instead of simulating"
	echo "  -o --optimise           optimise the couplings using a GA"
	echo "  -t --time               just output a time estimate for optimisation"
	echo "  -T --timefull           just output the time taken after optimising"
	echo "  -s --scaling            evaluate parallel scaling for a given network"
	echo "  -E --eetest             evaluate a network for nearby eescale values"
	echo "  -S --sites              generate scaling graph up to num of sites (def 20)"
	echo "  -X --fixed              generate scaling graph of time vs matrix size"
	echo "  -d --delete             delete all output folders in this directory"
	echo "  -c --convert     [int]  convert the string to a certain num of digits"
	echo " "
	echo "General Flags:"
	echo "  -e --eescale   [float]  set the scale of the excite-excite term (def 0.1)"
	echo "  -w --window    [float]  set the size of the time window to evaluate (def 20)" 
	echo " "
	echo "Optimisation Flags:"
	echo "  -g --genomes     [int]  specify the number of genomes        (def 1024)  "
	echo "  -G --generations [int]  specify the number of generations    (def 200)"
	echo "  -m --mutate      [int]  specify the initial mutation amount  (def 20% max)"
	echo "  -M --mutate-end  [int]  specify the final mutation amount    (def 1)"
	echo "  -f --fast               focus the optimisation more on speed"
	echo "  -F --fidelity    [int]  stop early once this fidelity is reached"
	echo "  -a --anim               create animations of the optimisation"
	echo "  -e --energy             only change the on-site energies"
	echo "  -n --negative           allow negative couplings"
	echo "  -x --exponential        force the fitness to use exponential scaling"
	echo "  -l --linear             force the fitness to use linear scaling"
	echo "  -C --cores       [int]  specify the number of cores to use   (max $numproc)"
	echo " "
	echo "Network strings:"
	echo "  e.g. \"<A|E>AB500BC500CD500DE500#0000\""
	echo " "
	echo "  This represents a linear chain with uniform couplings going from A->B->C->D->E."
	echo "  The values (here all 500) are relative to the maximum value."
	echo "  Duplicates (AA500) would represent a relative on-site energy."
	echo " "
	echo "  The start denotes the  <initial| and |target> states."
	echo "  A+B is a Bell state of A and B, whilst CD is both C and D at once."
	echo "  These can have coefficients such as 3, i, (3+2i) to optimise phases."
	echo " "
	echo "  Can also use something like @3.5 at the start to specify a time."
	echo "  This will make optimisation much faster but much more specific."
	echo " "
	echo "  See the above GitHub repos and associated publications"
	echo "  for more detailed info."
	echo " "
	exit 1

}

# Check the arguments
isGenetic=false
nextIs=""
stopAfter=false
anim=false
for var in "$@"
do
    if [ "$var" = "-o" ] || [ "$var" = "--optimise" ] ;
	then

		isGenetic=true

	elif [ "$var" = "-a" ] || [ "$var" = "--anim" ] ;
	then

		anim=true

	elif [ "$var" = "-c" ] || [ "$var" = "--convert" ] ;
	then

		stopAfter=true

	elif [ "$var" = "-t" ] || [ "$var" = "--time" ] ;
	then

		stopAfter=true
		isGenetic=true

	elif [ "$var" = "-T" ] || [ "$var" = "--timefull" ] ;
	then

		stopAfter=true
		isGenetic=true

	elif [ "$nextIs" = "cores" ] ;
	then

		numproc=$var
		nextIs=""

	elif [ "$var" = "-C" ] || [ "$var" = "--cores" ] ;
	then

		nextIs="cores"

	elif [ "$var" = "-d" ] || [ "$var" = "--delete" ] ;
	then

		rm -r output*
		exit 1

	elif [ "$var" = "-v" ] || [ "$var" = "--visualise" ] ;
	then

		$parent_path/spinnet-vis "$@"
		exit 1

	elif [ "$var" = "-E" ] || [ "$var" = "--eetest" ] ;
	then

		if [ "$2" = "" ] ;
		then
			echo "ERROR - please specify a network to test scaling on"
			exit 1
		fi

		gen="$2"
		if [ "$2" = "-E" ] || [ "$2" = "-eetest" ] ;
		then
			gen=$1
		fi

		> eetest.dat

		for ee in $(seq 0.0 0.03 1.0)
		do
			echo "$0 -e $ee $gen"
			source $0 -e $ee $gen
			fitness=$(grep "with fitness" output-latest/genetic.out | awk '{ print $4 }')
			fitness="${fitness:1}"
			echo "ran for alpha = $ee, got $fitness"
			echo $ee $fitness >> eetest.dat
		done

		python3 $parent_path/alpha.py

		exit 1

	elif [ "$var" = "-X" ] || [ "$var" = "--fixed" ] ;
	then

		chr() {
		  [ "$1" -lt 256 ] || return 1
		  printf "\\$(printf '%03o' "$1")"
		}

		# Clear the file
		> scalingFixed.dat

		maxVal=8
		for sites in $(seq 3 $maxVal)
		do

			startVal=65
			endVal=$(echo "$startVal+$sites" | bc)
			endValPlus=$(echo "$startVal+$sites+1" | bc)
			startValPlus=$(echo "$startVal+1" | bc)
			middleVal=$(echo "scale=0;($startVal+$endVal)/2" | bc)

			bulk=""
			for i in $(seq $startVal $endVal)
			do
				j=$(echo "$i+1" | bc)
				bulk="$bulk$(chr $i)$(chr $j)5000"
			done

			braket="<A|$(chr $endValPlus)>"
			echo "running for $sites sites with 1 excitation"
			ex1=$(source $0 -T -G 200 "${braket}${bulk}")

			braket="<AB|$(chr $endValPlus)>"
			echo "running for $sites sites with 2 excitations"
			ex2=$(source $0 -T -G 200 "${braket}${bulk}")

			braket="<ABC|$(chr $endValPlus)>"
			echo "running for $sites sites with 3 excitations"
			ex3=$(source $0 -T -G 200 "${braket}${bulk}")

			echo $sites $ex1 $ex2 $ex3 >> scalingFixed.dat

		done

		python3 $parent_path/fixed.py

		exit 1

	elif [ "$var" = "-S" ] || [ "$var" = "--sites" ] ;
	then

		# Function which returns the character from an asii value
		chr() {
		  [ "$1" -lt 256 ] || return 1
		  if [ "$1" -gt 90 ]
		  then
			  new=$(echo "$1+6" | bc)
			  printf "\\$(printf '%03o' "$new")"
		  else
			  printf "\\$(printf '%03o' "$1")"
		  fi
		}

		# Fixed settings
		minVal=13
		maxVal=32
		skip=1
		repeats=400

		# Clear the files
		> scalingSites90.dat
		> scalingSites95.dat
		> scalingSites97.dat

		for sites in $(seq $minVal $skip $maxVal)
		do

			# The ASCII values of the start and end letters
			startVal=65
			endVal=$(echo "$startVal+$sites" | bc)
			endValPlus=$(echo "$startVal+$sites+1" | bc)
			startValPlus=$(echo "$startVal+1" | bc)
			middleVal=$(echo "scale=0;($startVal+$endVal)/2" | bc)

			# Generate the bulk genome
			bulk=""
			for i in $(seq $startVal $endVal)
			do
				j=$(echo "$i+1" | bc)
				bulk="$bulk$(chr $i)$(chr $j)5000"
			done

			# Can't have i's in the bulk of genome
			bulk=$(echo "$bulk" | tr i %)

			# Generate the starting braket
			braket="<A|$(chr $endValPlus)>"
			echo \"$braket$bulk\"

			# Repeats for 90%
			echo "running for $sites sites to 90%"
			total=""
			for i in $(seq 1 $repeats)
			do
				attempt=$(source $0 -T -F 90 -w $maxVal -m 2000 -M 1 -g 256 -G 1000 "${braket}${bulk}")
				echo " - repeat $i took $attempt seconds"
				total="$total $attempt"
			done
			echo $sites $total >> scalingSites90.dat

			# Repeats for 95%
			echo "running for $sites sites to 95%"
			total=""
			for i in $(seq 1 $repeats)
			do
				attempt=$(source $0 -T -F 95 -w $maxVal -m 2000 -M 1 -g 256 -G 1000 "${braket}${bulk}")
				echo " - repeat $i took $attempt seconds"
				total="$total $attempt"
			done
			echo $sites $total >> scalingSites95.dat

			# Repeats for 97%
			echo "running for $sites sites to 97%"
			total=""
			for i in $(seq 1 $repeats)
			do
				attempt=$(source $0 -T -F 97 -w $maxVal -m 2000 -M 1 -g 256 -G 1000 "${braket}${bulk}")
				echo " - repeat $i took $attempt seconds"
				total="$total $attempt"
			done
			echo $sites $total >> scalingSites97.dat

		done

		# Run the matplotlib script
		python3 $parent_path/sites.py

		exit 1

	elif [ "$var" = "-s" ] || [ "$var" = "--scaling" ] ;
	then

		if [ "$2" = "" ] ;
		then
			echo "ERROR - please specify a network to test scaling on"
			exit 1
		fi

		> scalingParallel.dat

		shift
		for arg in "$@"
		do

			genome=$arg
			echo "for: $arg"

			echo 1 1 >> scalingParallel.dat

			echo "running on 1 core"
			total=0
			for i in 1 2 3 4 5
			do
				echo "repeat $i"
				attempt=$(source $0 -C 1 -t $genome)
				total=$(echo "scale=3;$total+$attempt" | bc)
			done
			initial=$(echo "scale=3;$total/5" | bc)

			for c in 2 4 8
			do
				echo "running on $c cores"
				total=0
				for i in 1 2 3 4 5
				do
					echo "repeat $i"
					attempt=$(source $0 -C $c -t $genome)
					total=$(echo "scale=3;$total+$attempt" | bc)
				done
				new=$(echo "scale=3;$total/5" | bc)
				echo $c $(echo "scale=3;$initial/$new" | bc) >> scalingParallel.dat
			done

		done

		python3 $parent_path/scaling.py

		exit 1

	elif [ "$var" = "--help" ] || [ "$var" = "-h" ] ;
	then
		outputHelp
	fi
done

if [ $# -eq 0 ]; then
	outputHelp
fi

rm -rf ./output
rm -f *.out

export OPENBLAS_NUM_THREADS=1

if [ "$isGenetic" = "true" ] ;
then
	mpirun --bind-to core -np $numproc $parent_path/run "$@"
else
	$parent_path/run "$@"
fi

if [ "$stopAfter" = "true" ]
then
	exit 1
fi

if [ "$isGenetic" = "true" ]
then

	python3 $parent_path/genetic.py genetic.out
	mkdir -p output/plots
	mv ./*.png ./output/plots 2> /dev/null
	mv ./*.pdf ./output/plots 2> /dev/null
	isGenetic=false

	if [ "$anim" = "true" ] ;
	then
		echo "Creating animation, takes around 30 seconds per 200 generations"
		python3 $parent_path/animate.py anim.data
		mv ./*.gif ./output/plots 2> /dev/null
	fi

fi

#Create output directory
mkdir -p output

if [ -f info.data ]; then

	if [ "$isGenetic" = "false" ]
	then

		# Read info from the run
		source 'info.data'

		if [ $MAX_EOF = 'T' ] && [ $REALISATIONS -eq 1 ] ;
		then
			if [ $METHOD = 'DIAG' ] ;
			then
				python3 $parent_path/maxEOF.py eof.data $REALISATIONS $TOTALTIME $OFFNOISE $DIAGNOISE
			fi
		fi

		# Realisations if noise
		if [ $REALISATIONS -ne 1 ] ;
		then
			for j in `seq 1 1 $REALISATIONS`
			do
				echo 'Realisation num:' $j

				# Run executable
				$parent_path/run

				cat eigenvalues.data >> eigenvalues_realisations.data

				if [ $SINGLE = 'T' ] ;
				then
					cat eof.data >> eof_realisations_SP.data
				elif [ $MAX_EOF = 'T' ] ;
				then
					cat eof.data >> eof_realisations_FD.data
				fi
			done

			python3 $parent_path/averageEigenvalues.py eigenvalues_realisations.data $VECTORS $REALISATIONS

			if [ $SINGLE = 'T' ] ;
			then
				python3 $parent_path/averageEOF.py eof_realisations_SP.data $TA $OFFNOISE $DIAGNOISE
			elif [ $MAX_EOF = 'T' ] ;
			then
				python3 $parent_path/maxEOF.py eof_realisations_FD.data $REALISATIONS $TOTALTIME $OFFNOISE $DIAGNOISE
			fi

			if [ $GRAPHICAL = 'T' ] ;
			then
				#Plot averaged
				python3 $parent_path/averagedEigenvalues.py $VECTORS
			fi

			#If plots have been created move them to the required folder
			mkdir -p output/plots
			mv ./*.png ./output/plots
			mv ./*.pdf ./output/plots

		fi

		#Graphical outputs (not done if single time realisations or integration method)
		if [ $GRAPHICAL = 'T' ] && [ $SINGLE = 'F' ] ;
		then

			#echo ' >> Plot'

			if [ $METHOD = 'DIAG' ] ;
			then

				python3 $parent_path/probabilities.py $VECTORS
				python3 $parent_path/eigenvalues.py $VECTORS

				if [ $EOF = 'T' ] ;
				then
					python3 $parent_path/eof.py $TOTALTIME $INITIALVEC
				fi

			fi

			python3 $parent_path/dynamics.py $TOTALTIME $INITIALVEC $N
			python3 $parent_path/exmap.py $TOTALTIME

			#If plots have been created move them to the required folder
			mkdir -p output/plots
			mv ./*.png ./output/plots 2> /dev/null
			mv ./*.pdf ./output/plots 2> /dev/null

		fi

	fi

	# Rename the output directory with the date and time
	mv ./*.out ./output 2> /dev/null
	mkdir -p ./output/data
	mv ./*.data ./output/data 2> /dev/null
	mv ./*.txt ./output/data 2> /dev/null
	rm -f -r ./output-latest
	cp -r output ./output-latest
	mv output ./output-$(date -u +"%F-%H-%M") 2> /dev/null

fi
